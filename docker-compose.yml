services:
  ### APP ###
  fastapi:
    container_name: fastapi
    build:
      context: ./backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    ports:
      - "80:8000"
    env_file:
      - .env
    networks:
      - common
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      redis:
        condition: service_started
      mongodb:
        condition: service_healthy
    restart: unless-stopped
  
  celery_worker:
    container_name: celery_worker
    build:
      context: ./backend
    command: celery -A celery_app worker --pool=solo --loglevel=INFO --hostname=celery@celery_worker
    env_file:
      - .env
    networks:
      - common
    healthcheck:
      test: ["CMD-SHELL", "celery -A celery_app inspect ping --destination celery@celery_worker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      fastapi:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  ### DATABASES ###
  mongodb:
    container_name: mongodb
    hostname: mongodb
    image: mongo:8.0.14-rc1-noble
    volumes:
      - mongo-data:/data/db
    networks:
      - common
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Just a cool looking web interface for MongoDB
  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongoexpress
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    env_file:
      - .env
    networks:
      - common
    depends_on:
      mongodb:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:alpine
    networks:
      - common
    restart: unless-stopped

volumes:
  mongo-data:

networks:
  common:
    driver: bridge
